from django.db import models

from locations.models import City, Country

# Create your models here.


class Language(models.Model):
    # id autogenerated by django
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name


class Facility(models.Model):
    # id autogenerated by django
    name = models.CharField(max_length=255)
    icon = models.ImageField(upload_to='schools/facilities', null=True, blank=True)

    def __str__(self):
        return self.name
     

class Acreditation(models.Model):
    name = models.CharField(max_length=255)
    logo = models.ImageField(upload_to='schools/acreditations', null=True, blank=True)

    def __str__(self):
        return self.name


class Activity(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(max_length=255, null=True, blank=True)
    img = models.ImageField(upload_to='schools/activities', null=True, blank=True)

    def __str__(self):
        return self.name


class Accommodation(models.Model):
    type = models.CharField(max_length=255)
    description = models.TextField(max_length=255, null=True, blank=True)
    img = models.ImageField(upload_to='schools/accommodation', null=True, blank=True)

    def __str__(self):
        return self.type


class Airport(models.Model):
    name = models.CharField(max_length=255)
    city = models.ForeignKey(City, on_delete=models.CASCADE)
   
    def __str__(self):
        return self.name


class Extra(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name


class AvgAge(models.Model):
    from_age = models.IntegerField(null=True, blank=True)
    to_age = models.IntegerField(null=True, blank=True)

    def __str__(self):
        return f"from {self.from_age} to {self.to_age}"
    

class ClassroomEquipment(models.Model):
    name = models.CharField(max_length=255)
    icon = models.ImageField(upload_to='schools/classroom_equipment', null=True, blank=True)

    def __str__(self):
        return self.name


class Address(models.Model):
    # id autogenerated by django
    city_id = models.ForeignKey(City, on_delete=models.CASCADE)
    street = models.CharField(max_length=255)
    street_number = models.CharField(max_length=20)
    post_code = models.CharField(max_length=20)

    def __str__(self):
        return self.street


class School(models.Model):
    """
    Main model
    """
    # id autogenerated by django
    language_id = models.ForeignKey(Language, on_delete=models.CASCADE)
    name =  models.CharField(max_length=255)
    description = models.TextField()
    facilities = models.ManyToManyField(Facility, through='SchoolFacility')
    acreditations = models.ManyToManyField(Acreditation, through='SchoolAcreditation')
    activities = models.ManyToManyField(Activity, through='SchoolActivity')
    airport_transfer = models.ManyToManyField(Airport, through='SchoolAirportTransfer')
    school_equipment = models.ManyToManyField(ClassroomEquipment, through='SchoolClassroomEquipment')


    def __str__(self):
        return self.name
    

class ContactInformation(models.Model):
    """
    Contact Information for providers.
    
    OneToOne relationship with school and  should be ok to use it
    with another providers.
    """
    # id = PK autogenerated by django
    #address = models.OneToOneField(Address, on_delete=models.CASCADE, null=True, blank=True)
    school = models.OneToOneField(School, on_delete=models.CASCADE)
    telephone = models.IntegerField()
    info_email = models.EmailField(max_length=255)
    bookings_email = models.EmailField(max_length=255, null=True, blank=True)
    academics_email = models.EmailField(max_length=255, null=True, blank=True)
    website = models.CharField(max_length=254, null=True, blank=True)
    # social_networks = models.ForeignKey(SchoolSocialNetwork, on_delete=models.CASCADE)  VER BIEN DESPUES

    def __str__(self):
        return self.school


class SchoolSocialNetwork(models.Model):
    pass


class SchoolImg(models.Model):
    # id autogenerated by django
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)
    img = models.ImageField(upload_to='schools/')
    description = models.CharField(max_length=255)
    alt = models.CharField(max_length=255)


class SchoolFacility(models.Model):
    """
    Asociative entity between School and Facility.
    """
    # id autogenerated by django
    facility_id = models.ForeignKey(Facility, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)


class SchoolAcreditation(models.Model):
    """
    Asociative entity between School and Acreditation.
    """
    # id autogenerated by django
    acreditation_id = models.ForeignKey(Acreditation, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)


class SchoolActivity(models.Model):
    """
    Asociative entity between School and Activity.
    """
    # id autogenerated by django
    activity_id = models.ForeignKey(Activity, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)


class SchoolAccommodation(models.Model):
    """
    Asociative entity between School and Accomodation.
    """
    # id autogenerated by django
    accommodation_id = models.ForeignKey(Accommodation, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)
    name =  models.CharField(max_length=255)
    ls_week_price = models.DecimalField(decimal_places=2, max_digits=6) # ls = low season
    hs_week_price = models.DecimalField(decimal_places=2, max_digits=6) # hs = high season


class SchoolAirportTransfer(models.Model):
    """
    Asociative entity between School and Airport.
    """
    # id autogenerated by django
    airport_id = models.ForeignKey(Airport, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)
    name =  models.CharField(max_length=255)
    price_one_way = models.DecimalField(decimal_places=2, max_digits=6) # ls = low season
    price_both_ways = models.DecimalField(decimal_places=2, max_digits=6) # hs = high season


class SchoolExtra(models.Model):
    """
    Asociative entity between School and Extra.
    """
    # id autogenerated by django
    extra_id = models.ForeignKey(Extra, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)
    ls_week_price = models.DecimalField(decimal_places=2, max_digits=6) # ls = low season
    hs_week_price = models.DecimalField(decimal_places=2, max_digits=6) # hs = high season


class SchoolAvgAge(models.Model):
    """
    Asociative entity between School and AvgAges? no really many to many
    """
    # id autogenerated by django
    avg_age_id = models.ForeignKey(AvgAge, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)
    avg = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True)


class SchoolClassroomEquipment(models.Model):
    """
    Asociative entity between School and ClassroomEquipment.
    """
    # id autogenerated by django
    classroom_equipment_id = models.ForeignKey(ClassroomEquipment, on_delete=models.CASCADE)
    school_id = models.ForeignKey(School, on_delete=models.CASCADE)


class NationalityMix(models.Model):
    """
    Asociative entity between School and NationalityMix.
    """
    # id autogenerated by django
    country = models.ForeignKey(Country, on_delete=models.CASCADE)
    school = models.ForeignKey(School, on_delete=models.CASCADE)
    percentage_students = models.DecimalField(max_digits=5, decimal_places=2)  # Maximum 100.00%

    def __str__(self):
        return f"Nationality Mix for {self.country_id.name}:{self.percentage_students}%" 